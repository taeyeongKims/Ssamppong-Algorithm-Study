#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<bool>> table(10, vector<bool>(10, false));
vector<int> paperCount = { 0,5,5,5,5,5 };
int result = 10000; 

bool CanPlace(int x, int y, int length) 
{
    if (x + length > 10 || y + length > 10) return false;
    for (int i = 0; i < length; ++i) 
    {
        for (int j = 0; j < length; ++j) 
        {
            if (!table[y + i][x + j]) return false;
        }
    }
    return true;
}

void PlacePaper(int x, int y, int length, bool state) 
{
    for (int i = 0; i < length; ++i) 
    {
        for (int j = 0; j < length; ++j) 
        {
            table[y + i][x + j] = state;
        }
    }
}

void Solve(int x, int y, int usedPaper) 
{
    if (y == 10)
    {
        result = min(result, usedPaper);
        return;
    }

    if (x == 10)
    {
        Solve(0, y + 1, usedPaper);
        return;
    }

    if (!table[y][x])
    {
        Solve(x + 1, y, usedPaper);
        return;
    }

    for (int size = 5; size >= 1; --size)
    {
        if (paperCount[size] > 0 && CanPlace(x, y, size)) 
        {
            PlacePaper(x, y, size, false);  
            paperCount[size]--;
            Solve(x + 1, y, usedPaper + 1);
            PlacePaper(x, y, size, true);  
            paperCount[size]++;
        }
    }
}

int main() 
{
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++) 
        {
            int input;
            cin >> input;
            table[i][j] = (input == 1);
        }
    }

    Solve(0, 0, 0);
    cout << (result == 10000 ? -1 : result) << endl;
    return 0;
}
